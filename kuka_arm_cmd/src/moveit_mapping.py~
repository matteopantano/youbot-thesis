#!/usr/bin/env python

import rospy
from std_msgs.msg import Int8
from geometry_msgs.msg import Twist
from sensor_msgs.msg import JointState
from brics_actuator.msg import JointPositions, JointValue, JointVelocities
import sys
import copy
import numpy
import time

class switch(object):
	value = None
        def __new__(class_, value):
        	class_.value = value
        	return True

def case(*args):
    return any((arg == switch.value for arg in args))

class arm_listener:
	
	def __init__(self):
		self.done = 0
		rospy.init_node('moveit_mapping', anonymous = True)
		rospy.Subscriber('/move_group/fake_controller_joint_states', JointState, self.processState)
		self.armPub = rospy.Publisher('/arm_controller/position_command', JointPositions, queue_size=10)
		self.gripPub = rospy.Publisher('/gripper_controller/position_command', JointPositions, queue_size=10)
		
		self.pos = JointValue()
		self.uri = 0
		self.value = [0 for i in range(6)]
		self.joint_states = JointState()		
		self.desiredposition = JointPositions()	
		self.once = 1

	def processState(self, joint_states):

		time.sleep(10)                

		self.joint_states = copy.deepcopy(joint_states)
		
		value = [0 for i in range(5)]
		unit = [0 for i in range(5)]
		value[0] = self.joint_states.position[0] # joint_uri_1
		value[1] = self.joint_states.position[1]  # joint_uri_2
		value[2] = self.joint_states.position[2]  # joint_uri_3 
		value[3] = self.joint_states.position[3] # joint_uri_4
		value[4] = self.joint_states.position[4] # joint_uri_5
		#value[5] = self.joint_states.position[5] # joint_uri_6	

		for index in range(5):
			unit[index] = "rad"
		#unit[5]="m"				

       		for index in range(0, 5):
			pos = JointValue()
			pos.joint_uri = "arm_joint_" + str(index + 1)
			pos.unit = unit[index]
			pos.value = value[index]
			self.desiredposition.positions.append(pos)
	
		print("------------------------------------------------")
   		print(self.desiredposition.positions)

		self.armPub.publish(self.desiredposition)
		#time.sleep(10)
		#pos.joint_uri = "gripper_finger_joint_l" 
		#pos.unit = unit[5]
		#pos.value = value[5]
		#self.desiredposition.positions.append(pos)
		#self.gripPub.publish(self.desiredposition)
		#time.sleep(0.2)
		#pos.joint_uri = "gripper_finger_joint_r" 
		#pos.unit = unit[5]
		#pos.value = value[5]
		#self.desiredposition.positions.append(pos)
		#self.gripPub.publish(self.desiredposition)
		

def main(args):
	arm_listener()
	# rospy.init_node('arm_listener', anonymous=True)
	try:
		rospy.spin()
	except KeyboardInterrupt:
        	print("Shutting down")

if __name__ == '__main__':
	main(sys.argv)
		
